const functions = require("firebase-functions");
const admin = require("firebase-admin");
const nodemailer = require("nodemailer");

// Initialiser Firebase Admin une seule fois
if (!admin.apps.length) {
  admin.initializeApp();
}

// Configuration email
const EMAIL_CONFIG = {
  user: "siisps2022@gmail.com",
  pass: "cipk uggq lruq xxqm",
  service: "gmail",
  support: "support@nexion.com",
};

const FRONTEND_URL = "http://localhost:5173";

// Fonction pour cr√©er le transporteur email
const createTransporter = () => {
  return nodemailer.createTransport({
    service: EMAIL_CONFIG.service,
    auth: {
      user: EMAIL_CONFIG.user,
      pass: EMAIL_CONFIG.pass,
    },
  });
};

// Template email
const getEmailTemplate = (content, title, type = "default") => {
  const iconMap = {
    activation: "‚ú®",
    reset: "üîê",
    confirmation: "‚úÖ",
    login: "üîë",
    default: "üìß",
  };

  return `
  <!DOCTYPE html>
  <html lang="fr">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
      body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
      .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
      .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; }
      .content { padding: 30px; line-height: 1.6; }
      .cta-container { text-align: center; margin: 30px 0; }
      .cta-button { display: inline-block; padding: 15px 30px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; text-decoration: none; border-radius: 25px; font-weight: bold; margin: 10px; }
      .footer { background: #f8f9fa; padding: 20px; text-align: center; color: #666; font-size: 14px; }
      .welcome-message { background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 15px 0; }
      .security-notice { background: #fff3cd; padding: 15px; border-radius: 8px; margin: 15px 0; }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="header">
        <h1>${iconMap[type]} ${title}</h1>
      </div>
      <div class="content">
        ${content}
      </div>
      <div class="footer">
        <p>¬© 2024 Nexion - Plateforme s√©curis√©e de gestion des donn√©es</p>
        <p>Si vous avez des questions, contactez-nous √† ${EMAIL_CONFIG.support}</p>
      </div>
    </div>
  </body>
  </html>
  `;
};

// =====================================================
// 1. EMAIL D'ACTIVATION DE COMPTE (CORRIG√â)
// =====================================================
exports.sendActivationEmail = functions.https.onCall(async (data, context) => {
  if (!context.auth) {
    throw new functions.https.HttpsError('unauthenticated', 'Utilisateur non authentifi√©');
  }
  
  const email = context.auth.token.email;
  const displayName = context.auth.token.name || "Utilisateur";

  if (!email || !email.includes("@")) {
    console.error("Email invalide:", email);
    return null;
  }

  try {
    const transporter = createTransporter();

    const actionCodeSettings = {
      url: `${FRONTEND_URL}/login?mode=verifyEmail`,
      handleCodeInApp: true,
    };

    const link = await admin
      .auth()
      .generateEmailVerificationLink(email, actionCodeSettings);

    const content = `
      <div class="welcome-message">
        <p>üéâ Bienvenue sur Nexion, ${displayName} !</p>
      </div>
      
      <h2>Activez votre compte pour commencer</h2>
      <p>Merci de rejoindre notre plateforme s√©curis√©e de gestion des donn√©es des op√©rations de s√ªret√©.</p>
      <p>Votre compte a √©t√© cr√©√© avec succ√®s, mais vous devez confirmer votre adresse email pour acc√©der √† toutes les fonctionnalit√©s.</p>
      
      <div class="cta-container">
        <a href="${link}" class="cta-button">‚ú® Activer mon compte</a>
      </div>
      
      <p><strong>Prochaines √©tapes :</strong></p>
      <ul>
        <li>Confirmez votre email en cliquant sur le bouton ci-dessus</li>
        <li>Compl√©tez votre profil utilisateur</li>
        <li>Explorez les fonctionnalit√©s de la plateforme</li>
      </ul>
      
      <div class="security-notice">
        <p>üîí <strong>S√©curit√© :</strong> Si vous n'avez pas cr√©√© ce compte, ignorez cet email ou contactez notre support.</p>
      </div>
    `;

    const mailOptions = {
      from: `Nexion <${EMAIL_CONFIG.user}>`,
      to: email,
      subject: "Activer votre compte Nexion",
      html: getEmailTemplate(
        content,
        "Activation de votre compte",
        "activation"
      ),
    };

    await transporter.sendMail(mailOptions);
    console.log(`Email d'activation envoy√© √† ${email}`);
    return { success: true };
  } catch (error) {
    console.error("Erreur lors de l'envoi de l'email d'activation:", error);
    throw new functions.https.HttpsError('internal', 'Erreur lors de l\'envoi de l\'email', error.message);
  }
});

// =====================================================
// 2. EMAIL DE V√âRIFICATION (CORRIG√â)
// =====================================================
exports.sendEmailVerification = functions.https.onRequest(async (req, res) => {
  // Headers CORS
  res.set("Access-Control-Allow-Origin", "*");
  res.set("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.set("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") {
    res.status(200).send("");
    return;
  }

  const email = req.body.email || req.query.email;

  if (!email || !email.includes("@")) {
    return res.status(400).json({
      error: "Email invalide ou manquant",
      code: "INVALID_EMAIL",
    });
  }

  try {
    // V√©rifier si l'utilisateur existe
    const user = await admin.auth().getUserByEmail(email);

    const transporter = createTransporter();

    const actionCodeSettings = {
      url: `${FRONTEND_URL}/login?mode=verifyEmail`,
      handleCodeInApp: true,
    };

    const link = await admin
      .auth()
      .generateEmailVerificationLink(email, actionCodeSettings);

    const content = `
      <h2>V√©rifiez votre adresse email</h2>
      <p>Cliquez sur le bouton ci-dessous pour v√©rifier votre email et activer votre compte.</p>
      
      <div class="cta-container">
        <a href="${link}" class="cta-button">‚ú® V√©rifier mon email</a>
      </div>
      
      <p><strong>üí° Astuce :</strong> V√©rifiez aussi votre dossier spam si vous ne voyez pas l'email.</p>
      
      <div class="security-notice">
        <p>üîí Ce lien expire dans 1 heure pour votre s√©curit√©.</p>
      </div>
    `;

    const mailOptions = {
      from: `Nexion <${EMAIL_CONFIG.user}>`,
      to: email,
      subject: "V√©rification d'email - Nexion",
      html: getEmailTemplate(content, "V√©rification d'email", "activation"),
    };

    await transporter.sendMail(mailOptions);
    console.log(`Email de v√©rification envoy√© √† ${email}`);

    res.status(200).json({
      message: "Email de v√©rification envoy√© avec succ√®s",
      success: true,
    });
  } catch (error) {
    console.error("Erreur lors de l'envoi de l'email de v√©rification:", error);

    if (error.code === "auth/user-not-found") {
      return res.status(404).json({
        error: "Utilisateur non trouv√©",
        code: "USER_NOT_FOUND",
      });
    }

    res.status(500).json({
      error: "Erreur lors de l'envoi de l'email de v√©rification",
      code: "SEND_ERROR",
      details: error.message,
    });
  }
});

// =====================================================
// 3. EMAIL DE R√âINITIALISATION DE MOT DE PASSE (CORRIG√â)
// =====================================================
exports.sendPasswordResetEmail = functions.https.onRequest(async (req, res) => {
  // Headers CORS
  res.set("Access-Control-Allow-Origin", "*");
  res.set("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.set("Access-Control-Allow-Headers", "Content-Type");

  if (req.method === "OPTIONS") {
    res.status(200).send("");
    return;
  }

  const email = req.body.email || req.query.email;

  if (!email || !email.includes("@")) {
    return res.status(400).json({
      error: "Email invalide ou manquant",
      code: "INVALID_EMAIL",
    });
  }

  try {
    // V√©rifier si l'utilisateur existe
    const user = await admin.auth().getUserByEmail(email);

    const transporter = createTransporter();

    const actionCodeSettings = {
      url: `${FRONTEND_URL}/reset-password`,
      handleCodeInApp: true,
    };

    const link = await admin
      .auth()
      .generatePasswordResetLink(email, actionCodeSettings);

    const content = `
      <h2>R√©initialisation de votre mot de passe</h2>
      <p>Vous avez demand√© la r√©initialisation de votre mot de passe. Cliquez sur le bouton ci-dessous pour continuer.</p>
      
      <div class="cta-container">
        <a href="${link}" class="cta-button">üîê R√©initialiser mon mot de passe</a>
      </div>
      
      <p><strong>‚è∞ Important :</strong> Ce lien expire dans 1 heure.</p>
      
      <div class="security-notice">
        <p>‚ö†Ô∏è <strong>Attention :</strong> Si vous n'avez pas fait cette demande, ignorez cet email et votre mot de passe restera inchang√©.</p>
      </div>
    `;

    const mailOptions = {
      from: `Nexion <${EMAIL_CONFIG.user}>`,
      to: email,
      subject: "R√©initialisation de mot de passe Nexion",
      html: getEmailTemplate(
        content,
        "R√©initialisation de mot de passe",
        "reset"
      ),
    };

    await transporter.sendMail(mailOptions);
    console.log(`Email de r√©initialisation envoy√© √† ${email}`);

    res.status(200).json({
      message: "Email de r√©initialisation envoy√© avec succ√®s",
      success: true,
    });
  } catch (error) {
    console.error(
      "Erreur lors de l'envoi de l'email de r√©initialisation:",
      error
    );

    if (error.code === "auth/user-not-found") {
      return res.status(404).json({
        error: "Utilisateur non trouv√©",
        code: "USER_NOT_FOUND",
      });
    }

    res.status(500).json({
      error: "Erreur lors de l'envoi de l'email de r√©initialisation",
      code: "SEND_ERROR",
      details: error.message,
    });
  }
});

// =====================================================
// 4. EMAIL DE CONFIRMATION DE CHANGEMENT DE MOT DE PASSE (CORRIG√â)
// =====================================================
exports.sendPasswordChangeConfirmation = functions.https.onRequest(
  async (req, res) => {
    // Headers CORS
    res.set("Access-Control-Allow-Origin", "*");
    res.set("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
    res.set("Access-Control-Allow-Headers", "Content-Type");

    if (req.method === "OPTIONS") {
      res.status(200).send("");
      return;
    }

    const email = req.body.email || req.query.email;
    const userId = req.body.userId || req.query.userId;

    if (!email || !email.includes("@")) {
      return res.status(400).json({
        error: "Email invalide ou manquant",
        code: "INVALID_EMAIL",
      });
    }

    try {
      const transporter = createTransporter();

      const content = `
      <h2>Mot de passe modifi√© avec succ√®s</h2>
      <p>Votre mot de passe a √©t√© modifi√© avec succ√®s le ${new Date().toLocaleDateString(
        "fr-FR"
      )} √† ${new Date().toLocaleTimeString("fr-FR")}.</p>
      
      <div class="welcome-message">
        <p>‚úÖ Votre compte est maintenant s√©curis√© avec votre nouveau mot de passe.</p>
      </div>
      
      <div class="cta-container">
        <a href="${FRONTEND_URL}/login" class="cta-button">üîë Se connecter</a>
      </div>
      
      <p><strong>Rappels de s√©curit√© :</strong></p>
      <ul>
        <li>Ne partagez jamais votre mot de passe</li>
        <li>D√©connectez-vous apr√®s chaque session</li>
        <li>Signalez toute activit√© suspecte</li>
      </ul>
      
      <div class="security-notice">
        <p>üö® <strong>Activit√© non autoris√©e ?</strong> Si vous n'avez pas effectu√© ce changement, contactez imm√©diatement notre support √† ${
          EMAIL_CONFIG.support
        }</p>
      </div>
    `;

      const mailOptions = {
        from: `Nexion <${EMAIL_CONFIG.user}>`,
        to: email,
        subject: "Confirmation de changement de mot de passe Nexion",
        html: getEmailTemplate(
          content,
          "Changement de mot de passe",
          "confirmation"
        ),
      };

      await transporter.sendMail(mailOptions);
      console.log(`Email de confirmation envoy√© √† ${email}`);

      // Optionnel : Enregistrer l'√©v√©nement dans Firestore
      if (userId) {
        const userRef = admin.firestore().collection("users").doc(userId);
        await userRef.update({
          lastPasswordChange: admin.firestore.FieldValue.serverTimestamp(),
          passwordChangeNotificationSent: true,
        });
      }

      res.status(200).json({
        message: "Email de confirmation envoy√© avec succ√®s",
        success: true,
      });
    } catch (error) {
      console.error(
        "Erreur lors de l'envoi de l'email de confirmation:",
        error
      );
      res.status(500).json({
        error: "Erreur lors de l'envoi de l'email de confirmation",
        code: "SEND_ERROR",
        details: error.message,
      });
    }
  }
);

// Les fonctions de connexion par lien email ont √©t√© supprim√©es
// Seules les fonctions d'authentification essentielles sont conserv√©es :
